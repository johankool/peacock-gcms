namespace biblio = "http://purl.org/net/biblio#"
namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"
namespace vcard = "http://www.w3.org/2006/vcard/ns"
namespace foaf = "http://xmlns.com/foaf/0.1/"
namespace prism = "http://prismstandard.org/namespaces/1.2/basic/"
namespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
namespace rng = "http://relaxng.org/ns/structure/1.0"

dc:title [ "Biblio Schema" ]
dc:creator [ "Bruce D’Arcus" ]
dc:copyright [ "Bruce D’Arcus, 2006" ]
dc:rights [ "Permission to freely use, copy and distribute." ]
dc:description [
  "A RELAX NG schema to validate XML instances based on the biblio <http://purl.org/net/biblio> RDF schema. The schema represents a superset of legacy formats such as RIS, Refer and BibTeX. But unlike library standards such as MODS, is purpose-designed for citation metadata."
]
start =
  element rdf:RDF {
    biblio.reference_library?
    & (biblio.reference_collection
       | biblio.reference_items
       | biblio.agents
       | biblio.collections
       | biblio.events
       | biblio.Note)+
  }
div {
  biblio.reference_library =
    element biblio:ReferenceLibrary {
      rdf.id, (biblio.title? & biblio.owner? & biblio.reference+)
    }
  biblio.reference_collection =
    element biblio:ReferenceCollection {
      rdf.id,
      (biblio.title? & biblio.owner? & biblio.reference+ & biblio.partOf)
    }
  biblio.reference = element biblio:reference { rdf.linked_resource }
  biblio.owner = element biblio:owner { rdf.linked_resource }
}

## reference types
div {
  biblio.reference_items =
    element biblio:Abstract { rdf.id, biblio.base_properties }
    | element biblio:Album { rdf.id, biblio.base_properties }
    | element biblio:Article {
        rdf.id,
        biblio.author*,
        (biblio.base_properties & biblio.part_properties)
      }
    | element biblio:Bill { rdf.id, biblio.base_properties }
    | element biblio:Book {
        rdf.id, (biblio.base_properties & biblio.publisher*)
      }
    | element biblio:Broadcast { rdf.id, biblio.base_properties }
    | element biblio:Chapter {
        rdf.id, (biblio.base_properties & biblio.part_properties)
      }
    | element biblio:Data { rdf.id, biblio.base_properties }
    | element biblio:Diagram { rdf.id, biblio.base_properties }
    | element biblio:Dissertation { rdf.id, biblio.base_properties }
    | element biblio:Document { rdf.id, biblio.base_properties }
    | element biblio:EMail { rdf.id, biblio.base_properties }
    | element biblio:EditedBook {
        rdf.id, (biblio.base_properties & biblio.publisher*)
      }
    | element biblio:Essay { rdf.id, biblio.base_properties }
    | element biblio:Figure { rdf.id, biblio.base_properties }
    | element biblio:Illustration { rdf.id, biblio.base_properties }
    | element biblio:Interview { rdf.id, biblio.base_properties }
    | element biblio:JournalArticle {
        rdf.id,
        biblio.author*,
        (biblio.base_properties & biblio.part_properties)
      }
    | element biblio:Law { rdf.id, biblio.base_properties }
    | element biblio:Legislation { rdf.id, biblio.base_properties }
    | element biblio:Letter { rdf.id, biblio.base_properties }
    | element biblio:Manuscript { rdf.id, biblio.base_properties }
    | element biblio:Map { rdf.id, biblio.base_properties }
    | element biblio:Memo { rdf.id, biblio.base_properties }
    | element biblio:MotionPicture { rdf.id, biblio.base_properties }
    | element biblio:MusicalScore { rdf.id, biblio.base_properties }
    | element biblio:Painting { rdf.id, biblio.base_properties }
    | element biblio:Pamphlet { rdf.id, biblio.base_properties }
    | element biblio:Paper {
        rdf.id, biblio.author*, (biblio.base_properties & biblio.presentedAt?)
      }
    | element biblio:Patent { rdf.id, biblio.base_properties }
    | element biblio:PersonalCommunication { rdf.id, biblio.base_properties }
    | element biblio:Poster {
        rdf.id, biblio.author*, (biblio.base_properties & biblio.presentedAt?)
      }
    | element biblio:Proceedings { rdf.id, biblio.base_properties }
    | element biblio:Publisher { rdf.id, biblio.base_properties }
    | element biblio:Reference { rdf.id, biblio.base_properties }
    | element biblio:Report {
        rdf.id, (biblio.base_properties & biblio.publisher?)
      }
    | element biblio:Review { rdf.id, biblio.base_properties }
    | element biblio:Song { rdf.id, biblio.base_properties }
    | element biblio:Speech {
        rdf.id, (biblio.base_properties & biblio.presentedAt?)
      }
    | element biblio:Thesis { rdf.id, biblio.base_properties }
}

## properties
div {
  biblio.date = element biblio:date { biblio.date_type }
  biblio.title = element biblio:title { rdf.string_literal }
  biblio.base_properties =
    biblio.author*,
    biblio.editor*,
    biblio.translator*,
    (biblio.title*
     & element biblio:abbreviatedTitle { rdf.string_literal }*
     & biblio.date?
     & element biblio:issued { biblio.date_type }?
     & element rdf:type { rdf.linked_resource }?
     & element biblio:accessed { biblio.date_type }?
     & element biblio:identifier { rdf.linked_resource }*
     & element biblio:edition { rdf.string_literal }?
     & element biblio:original {
         rdf.linked_resource | biblio.reference_items
       }?)
  biblio.part_properties =
    biblio.partOf
    & element biblio:volume { rdf.string_literal }?
    & element biblio:issue { rdf.string_literal }?
    & element biblio:number { rdf.string_literal }?
    & element biblio:section { rdf.string_literal }?
    & element biblio:pages { rdf.string_literal }?
  biblio.partOf =
    element biblio:partOf {
      rdf.linked_resource | biblio.reference_items | biblio.collections
    }
  biblio.event_properties =
    biblio.title
    & biblio.sponsor?
    & ((element biblio:startDate { biblio.date_type }
        & element biblio:endDate { biblio.date_type })
       | biblio.date)
  biblio.presentedAt =
    element biblio:presentedAt { rdf.linked_resource | biblio.events }
  
  ## Contributors
  div {
    biblio.author = element biblio:author { biblio.contribution }
    biblio.editor = element biblio:editor { biblio.contribution }
    biblio.translator = element biblio:translator { biblio.contribution }
    biblio.contribution =
      attribute rdf:parseType { "Resource" },
      (biblio.agent & biblio.role? & biblio.position)
    biblio.agent = element biblio:agent { rdf.linked_resource | biblio.agents }
    biblio.agents =
      element foaf:Person { rdf.id?, biblio.person.properties }
      | element foaf:Group { rdf.id?, biblio.person.properties }
      | foaf.organization
    foaf.organization = element foaf:Organization { rdf.id?, biblio.org.properties }
    biblio.publisher =
      element biblio:publisher { rdf.linked_resource | foaf.organization }
    biblio.sponsor =
      element biblio:sponsor { rdf.linked_resource | foaf.organization }
    div {
      biblio.org.properties =
        element foaf:name { rdf.string_literal }
        & element biblio:abbreviatedName { rdf.string_literal }?
        & element biblio:address { rdf.string_literal }?
      biblio.person.properties =
        element biblio:familyName { rdf.string_literal }
        & element biblio:givenName { rdf.string_literal }
        & element biblio:prefix { rdf.string_literal }?
        & element biblio:suffix { rdf.string_literal }?
      
      ## RDF has an unordered content model, so this makes the order explicit.
      biblio.position = element biblio:position { xsd:nonNegativeInteger }
      
      ## For roles other than author, editor or translator.
      biblio.role = element biblio:role { rdf.linked_resource }
    }
  }
}

## collections (periodicals, etc.)
div {
  biblio.collections =
    element biblio:Collection { rdf.id?, biblio.base_properties }
    | element biblio:CourtReporter { rdf.id?, biblio.base_properties }
    | element biblio:Journal { rdf.id?, biblio.base_properties }
    | element biblio:Periodical { rdf.id?, biblio.base_properties }
    | element biblio:Series { rdf.id?, biblio.base_properties }
}

## events 
div {
  biblio.events =
    element biblio:Workshop { rdf.id?, biblio.event_properties }
    | element biblio:Conference { rdf.id?, biblio.event_properties }
    | element biblio:Event { rdf.id?, biblio.event_properties }
    | element biblio:Hearing { rdf.id?, biblio.event_properties }
}

## notes 
div {
  biblio.Note =
    element biblio:Note {
      rdf.id?,
      (biblio.title?
       & biblio.creator
       & biblio.date
       & biblio.content
       & biblio.references*)
    }
  biblio.creator = element biblio:creator { rdf.linked_resource }
  biblio.content = element biblio:content { rdf.string_literal }
  biblio.references = element biblio:references { rdf.linked_resource }
}

## basic RDF structures
div {
  
  ## The schema constrains the kind of URI identifier used. Relative URIs, for example, are not supported.
  ## Likewise, use of standard URNs and INFO URIs is encouraged, and the pattern prefixes validated.
  ## In general, ISSNs, DOIs, and OCLC numbers are particularly good identifiers. ISBNs suffer from 
  ## two problems: first, they are not always unique, and second, they are more specific than the 
  ## more abstract items that citations refer to. For example, a given edition of a book often has more 
  ## than one ISBN to refer to different physical formats (hardcover vs. softcover).
  biblio.uri =
    xsd:anyURI {
      pattern =
        "http://.*|urn:(issn|isbn|uuid|isan):.*|info:(doi|oclcnum|lccn|pmid|sici)/.*|tag:.*"
    }
  rdf.id = attribute rdf:about { biblio.uri }
  rdf.string_literal =
    attribute xml:lang { xsd:language }?,
    text
  rdf.linked_resource = attribute rdf:resource { biblio.uri }
  biblio.date_type = xsd:date | xsd:gYear | xsd:gYearMonth
}
