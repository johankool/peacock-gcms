A CSL style has a root element of style. CSL is namespaced, so a valid style must include a proper namespace declaration; for example:

<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" xml:lang="en">

The info element contains the style metadata, and shares the same content model (if not the same namespace) as Atom. The style metadata must include ***

Defining styles in CSL involves three basic structures: macros, variables, and options.

An option is a simple parameter. This is used to set the sorting algorithm, or the rules for "et al" handling, and so forth.

To configure the layout of citations and bibliographic entries you start by creating a series of macros for common elements such as authors, titles, publishers, online access information, and so forth. A well-designed style will be able to rely on macros for the majority of the processing work. For example, the following "author" macro accounts for a wide-vairety of different cases: different kinds of resources, untitled items, etc.

  <macro name="author">
    <names variable="author">
      <name name-as-sort-order="all" and="symbol" sort-separator=", " initialize-with="."
        delimiter=", " delimiter-precedes-last="always"/>
      <label form="short" prefix=" (" suffix=".)" text-transform="capitalize"/>
      <substitute>
        <names variable="editor"/>
        <names variable="translator"/>
        <text macro="title"/>
      </substitute>
    </names>
  </macro>

With a series of these macros, laying out formatting becomes a simple matter of calling the macros and variables. For example, here is a citation layout for the APA style:

    <layout prefix="(" suffix=")" delimiter="; ">
      <text macro="author-short"/>
      <date variable="issued" prefix=", ">
        <date-part name="year"/>
      </date>
      <text variable="locator" prefix=": "/>
    </layout>

Thee following bibliography layout will show the power of macros more clearly. We begin by calling the "author" macro. Because this macro covers all reference types, there is no need to duplicate it elsewhere; likewise with the date "issued" variable:

    <layout>
      <text macro="author" suffix="."/>
      <date variable="issued" prefix=" (" suffix=").">
        <date-part name="year"/>
      </date>

Beyond author and date issued, formatting often varies depending on either the structural class of a reference (that it is an item in something else, for example, or a standalone item) or its reference type (article, book,  etc.). To configure this conditional formatting, we can use the choose element. The remainder of the layout below illustrates its usage.

      <choose>
        <if type="book">
          <group suffix=".">
            <text macro="title" prefix=" "/>
            <text macro="editor-translator" prefix=" "/>
          </group>
          <text prefix=" " suffix="." macro="publisher"/>
        </if>

Note here we are conditioning layout on reference type with the "type" attribute. Conditional attributes like "type" can contain a list of tokens. In this case, though, it's not strictly necessary to list all the type that might be formatted like a "book" because CSL includes a notion of fallback behavior. In short, there are three core types: article, book, and chapter. These correspond to different generic classes. As a result, if a CSL engine comes across a reference type it does not find a template for, it will use instead the fallback definition. For example, a "magazine article" will use the generic "article" template.

        <else-if type="chapter">
          <text macro="title" prefix=" "/>
          <group class="container" prefix=". ">
            <text term="in" text-transform="capitalize"/>
            <names variable="editor translator" prefix=" " suffix="," delimiter=", ">
              <name and="symbol" sort-separator=", " initialize-with=". "/>
              <label form="short" prefix=" (" suffix=".)" text-transform="capitalize"/>
            </names>
            <text variable="container-title" font-style="italic" prefix=" " suffix="."/>
            <text variable="collection-title" prefix=" " suffix="."/>
            <group suffix=".">
              <text macro="publisher" prefix=" "/>
              <group prefix=" (" suffix=")">
                <label variable="page" form="short" suffix=". "/>
                <text variable="page"/>
              </group>
            </group>
          </group>
        </else-if>
        <else>
          <group suffix=".">
            <text macro="title" prefix=" "/>
            <text macro="editor-translator" prefix=" "/>
          </group>
          <group class="container" prefix=" " suffix=".">
            <text variable="container-title" font-style="italic"/>
            <group prefix=", ">
              <text variable="volume" font-style="italic"/>
              <text variable="issue" prefix="(" suffix=")"/>
            </group>
            <text variable="page" prefix=", "/>
          </group>
        </else>
      </choose>
      <text prefix=" " macro="access"/>

Note here at the end—outside of the choose element—the style calls the "access" macro. That macro is for online resources, and will print the URL, the access date, and so forth. Again, this allows us to keep the style compact, and also robust: able to handle unanticipated resources the style author may not have consider.

    </layout>

And that concludes the templates for the bibliography. The basic rule, then, should be to use macros where possible, and to avoid duplication. In some cases, it can also be a good approach to condition formatting not on the type, but on more generic characteristics such as the presence of a particular variable.


